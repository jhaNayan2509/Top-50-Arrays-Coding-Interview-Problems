//Video Solution: https://www.youtube.com/watch?v=2MCmj7bms9E

//C++
class Solution {
public:
    vector<int> getRow(int rowIndex) {
        //T.C.: O(rowIndex^2) S.C.: O(rowIndex)

        vector<int> ans(rowIndex + 1, 1); //Filling vector with 1

        //updating values with respect to pascal's triangle equation
        for (int i = 1; i <= rowIndex; i++) {
            for (int j = i - 1; j > 0; j--) {
                ans[j] += ans[j - 1];
            }
        }
        return ans;
    }
};

//Java
class Solution {
    public List<Integer> getRow(int rowIndex) {
        //T.C.: O(rowIndex^2) S.C.: O(rowIndex)

        List<Integer> ans = new ArrayList<>();

        //Filling arraylist with 1
        for (int i = 0; i < rowIndex + 1; i++) {
            ans.add(1);
        }

        //updating values with respect to pascal's triangle equation
        for (int i = 1; i <= rowIndex; i++) {

            for (int j = i - 1; j > 0; j--) {
                ans.set(j, ans.get(j) + ans.get(j - 1));
            }
            
        }

        return ans;
    }
}

//Python3

class Solution:
    def getRow(self, rowIndex: int) -> List[int]:
        #T.C.: O(rowIndex^2) S.C.: O(rowIndex)
        ans = [1] * (rowIndex + 1)  #Filling list with 1

        #updating values with respect to pascal's triangle equation
        for i in range(1, rowIndex + 1):
            for j in range(i - 1, 0, -1):
                ans[j] += ans[j - 1]

        return ans
