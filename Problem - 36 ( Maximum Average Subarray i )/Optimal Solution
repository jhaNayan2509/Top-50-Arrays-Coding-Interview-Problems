//Video Solution: https://youtu.be/2AMWaX2Ew6U

//Optimal Solution: T.C.: O(N) S.C.: O(1)

//C++

class Solution {
public:
    double findMaxAverage(vector<int>& nums, int k) {
        double max_avg = numeric_limits<double>::lowest();
        double w_sum = 0;
        int n = nums.size();
        int start = 0;

        for (int i = 0; i < n; i++) {
            w_sum += nums[i];

            if ((i - start + 1) == k) {
                double avg = w_sum / k;
                max_avg = max(avg, max_avg);
                w_sum -= nums[start];
                start += 1;
            }
        }

        return max_avg;
    }
};

//Java

class Solution {
    public double findMaxAverage(int[] nums, int k) {
        //Optimal Solution
        double max = Double.NEGATIVE_INFINITY;
        double w_sum = 0;
        int n = nums.length;
        int start = 0;

        for(int i = 0; i<n; i++){
            w_sum+=nums[i];

            if((i-start+1) == k){
                double avg = w_sum/k;
                max = Math.max(avg, max);
                w_sum-=nums[start];
                start+=1;
            }
            
        }

        return max;
    }
}

//Python3

class Solution:
    def findMaxAverage(self, nums: List[int], k: int) -> float:
        max_avg = float('-inf')
        w_sum = 0
        n = len(nums)
        start = 0

        for i in range(n):
            w_sum += nums[i]

            if (i - start + 1) == k:
                avg = w_sum / k
                max_avg = max(avg, max_avg)
                w_sum -= nums[start]
                start += 1

        return max_avg
