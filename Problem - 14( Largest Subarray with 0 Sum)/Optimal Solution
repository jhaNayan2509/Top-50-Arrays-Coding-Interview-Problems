//C++

class Solution{
    public:
    int maxLen(vector<int>&arr, int n)
    {   
       // Optimal Solution T.C.: O(N) S.C.: O(N)
        int maxi = 0;
        
        unordered_map<int,int> map;
        int sum = 0;
        
        for(int i =0; i<n; i++){
            sum = sum+arr[i];
            
            if(sum == 0) maxi = i+1;
            
            if(map.find(sum)!=map.end()){
                int length = i - map[sum];
                maxi = max(maxi,length);
            }
            
            else if(map.find(sum) == map.end())
            map[sum] = i;
        }
        
        return maxi;
    }
};

//Java

class GfG
{
    int maxLen(int arr[], int n)
    {
        // Optimal Solution T.C.: O(N) S.C.: O(N)
        int max = 0;
        
        Map<Integer,Integer> map = new HashMap<>();
        int sum = 0;
        
        for(int i =0; i<n; i++){
            sum = sum+arr[i];
            
            if(sum == 0) max = i+1;
            
            if(map.containsKey(sum)){
                int length = i - map.get(sum);
                max = Math.max(max,length);
            }
            
            else if(map.containsKey(sum) == false)
            map.put(sum,i);
        }
        
        return max;
    }
}

//Python3

class Solution:
    def maxLen(self, n, arr):
        # Optimal Solution T.C.: O(N) S.C.: O(N)
        maxi = 0
        map = {}
        sum = 0

        for i in range(n):
            sum += arr[i]

            if sum == 0:
                maxi = i + 1

            if sum in map:
                length = i - map[sum]
                maxi = max(maxi, length)
            elif sum not in map:
                map[sum] = i

        return maxi


