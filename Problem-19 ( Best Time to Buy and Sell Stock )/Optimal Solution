//C++

class Solution {
public:
    int maxProfit(vector<int>& prices) {
        //Optimal Solution without extra space: Modified Kadane's Algorithm V.2.1
        //T.C.: O(N) S.C.: O(1)

        int n = prices.size();
        int maxProfit = 0;
        int currMax_Profit = 0;
        
        for(int i = 1; i<n; i++){
            currMax_Profit += prices[i] - prices[i-1];
            
            if(currMax_Profit>0){
                //Do nothing
            }
            
            else{
                currMax_Profit = 0;
            }
            
            maxProfit = max(maxProfit,currMax_Profit);
        }
        
        return  maxProfit;
    }
};

//Java

class Solution {
    
    public int maxProfit(int[] prices) {
        //Optimal Solution without extra space: Modified Kadane's Algorithm V.2.1
        //T.C.: O(N) S.C.: O(1)

        int n = prices.length;

        int maxProfit = 0;
        int currMax_Profit = 0;

        for(int i = 1; i<n; i++){
            
            currMax_Profit += prices[i] - prices[i-1];

            if(currMax_Profit>0){
               
            }

            else{
                currMax_Profit = 0;
            }

            maxProfit = Math.max(maxProfit,currMax_Profit);
        }

        return  maxProfit;
    }
}

//Python3

class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        #Optimal Solution without extra space: Modified Kadane's Algorithm V.2.1
        #T.C.: O(N) S.C.: O(1)
        
        n = len(prices)
        maxProfit = 0
        currMax_Profit = 0
        
        for i in range(1, n):
            currMax_Profit += prices[i] - prices[i-1]
            
            if currMax_Profit > 0:
                pass
            
            else:
                currMax_Profit = 0
            
            maxProfit = max(maxProfit, currMax_Profit)
        
        return maxProfit
