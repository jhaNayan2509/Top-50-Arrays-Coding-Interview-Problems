//C++

class Solution {
public:
    int maxProfit(vector<int>& prices) {
        //Brute Force: O(N^2), O(1)

        int n = prices.size();

        int maxProfit =0;
        
        for(int i = 0; i<n; i++){
            for(int j = i+1; j<n; j++){
                if(prices[j]>prices[i]){
                    int currProfit = prices[j]-prices[i];

                    maxProfit = max(maxProfit, currProfit);
                }
            }
        }

        return  maxProfit; 
    }
};

//Java

class Solution {
    public int maxProfit(int[] prices) {
        //Brute Force: O(N^2), O(1)

        int n = prices.length;

        int maxProfit =0;
        
        for(int i = 0; i<n; i++){
            for(int j = i+1; j<n; j++){
                if(prices[j]>prices[i]){
                    int currProfit = prices[j]-prices[i];

                    maxProfit = Math.max(maxProfit, currProfit);
                }
            }
        }

        return  maxProfit;
    }
}

//Python3

#Brute Force: O(N^2), O(1)
class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        
        n = len(prices)

        maxProfit =0
        
        for i in range(0,n):
            for j in range(i+1,n):
                if prices[j]>prices[i]:
                    currProfit = prices[j]-prices[i]

                    maxProfit = max(maxProfit, currProfit)

        return  maxProfit; 
