//C++

class Solution {
public:
    int subarraySum(vector<int>& nums, int k) {

         //Optimal Solution: T.C.: O(N), S.C.: O(N)
        
        int count=0;

        unordered_map<int,int> map;

        int sum = 0;

        for(int i = 0; i<nums.size(); i++){
            sum+=nums[i];

            if(sum == k) count++;

            if(map.find(sum-k)!=map.end()){
                count+=map[sum-k];
            }

            map[sum]++;
        }
        return count;
    }
};

//Java

class Solution {
    public int subarraySum(int[] nums, int k) {

        //Optimal Solution: T.C.: O(N), S.C.: O(N)
        
        int count=0;

        Map<Integer,Integer> map = new HashMap<>();
        int sum = 0;

        for(int i = 0; i<nums.length; i++){
            sum+=nums[i];

            if(sum == k) count++;

            if(map.containsKey(sum-k)){
                count+=map.get(sum-k);
            }

            map.put(sum,map.getOrDefault(sum,0)+1);
        }
        return count;
    }
}

//Python3

class Solution:
    def subarraySum(self, nums: List[int], k: int) -> int:
        # Optimal Solution: T.C.: O(N), S.C.: O(N)
        
        count = 0
        map = {}
        sum_val = 0

        for num in nums:
            sum_val += num

            if sum_val == k:
                count += 1

            if sum_val - k in map:
                count += map[sum_val - k]

            map[sum_val] = map.get(sum_val, 0) + 1

        return count
