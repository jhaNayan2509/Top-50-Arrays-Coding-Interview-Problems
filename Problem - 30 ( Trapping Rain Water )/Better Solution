//Video Solution: https://www.youtube.com/watch?v=AVwIfxuVWVk

// Better Solution: T.C.: O(n) S.C.: O(n)

//C++

class Solution {
public:
    int trap(vector<int>& height) {
        int n = height.size();
        
        vector<int> left_max(n);
        vector<int> right_max(n);
        
        int ans = 0;
        left_max[0] = height[0];
        for (int i = 1; i < n; i++) {
            left_max[i] = max(left_max[i - 1], height[i]);
        }

        right_max[n - 1] = height[n - 1];
        for (int i = n - 2; i >= 0; i--) {
            right_max[i] = max(right_max[i + 1], height[i]);
        }

        for (int i = 0; i < n; i++) {
            ans += min(left_max[i], right_max[i]) - height[i];
        }
        return ans;
    }
};

//Java

class Solution {
    public int trap(int[] height) {
        int n = height.length;

        int[] left_max = new int[n];
        int[] right_max = new int[n];

        int ans = 0;
        left_max[0] = height[0];
        for (int i = 1; i < n; i++) {
            left_max[i] = Math.max(left_max[i - 1], height[i]);
        }

        right_max[n - 1] = height[n - 1];
        for (int i = n - 2; i >= 0; i--) {
            right_max[i] = Math.max(right_max[i + 1], height[i]);
        }

        for (int i = 0; i < n; i++) {
            ans += Math.min(left_max[i], right_max[i]) - height[i];
        }
        return ans;
    }
}

//Python3

class Solution:
    def trap(self, height: List[int]) -> int:
        n = len(height)
        
        left_max = [0] * n
        right_max = [0] * n
        
        ans = 0
        left_max[0] = height[0]
        for i in range(1, n):
            left_max[i] = max(left_max[i - 1], height[i])
        
        right_max[n - 1] = height[n - 1]
        for i in range(n - 2, -1, -1):
            right_max[i] = max(right_max[i + 1], height[i])
        
        for i in range(n):
            ans += min(left_max[i], right_max[i]) - height[i]
        
        return ans
