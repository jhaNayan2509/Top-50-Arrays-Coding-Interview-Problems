//Video Solution: 

//Brute-force Solution: T.C.: O(N^2) S.C.: O(1)

//C++

class Solution {
public:
    int trap(vector<int>& height) {
        
        int n = height.size();

        int ans = 0;

        for (int i = 1; i < n - 1; i++) {
            int left_max = 0;

            for (int j = i - 1; j >= 0; j--) {
                left_max = max(left_max, height[j]);
            }

            int right_max = 0;

            for (int j = i + 1; j < n; j++) {
                right_max = max(right_max, height[j]);
            }

            int water = min(left_max, right_max) - height[i];
            if (water > 0) {
                ans += water;
            }
        }

        return ans;
    }
};

//Java

class Solution {
    public int trap(int[] height) {
       
        int n = height.length;

        int ans = 0;

        for (int i = 1; i < n - 1; i++) {
            int left_max = 0;

            for (int j = i - 1; j >= 0; j--) {
                left_max = Math.max(left_max, height[j]);
            }

            int right_max = 0;

            for (int j = i + 1; j < n; j++) {
                right_max = Math.max(right_max, height[j]);
            }

            int water = Math.min(left_max, right_max) - height[i];
            if (water > 0) {
                ans += water;
            }
        }

        return ans;
    }
}

//Python3

class Solution:
    def trap(self, height: List[int]) -> int:
        
        n = len(height)

        ans = 0

        for i in range(1, n - 1):
            left_max = 0

            for j in range(i - 1, -1, -1):
                left_max = max(left_max, height[j])

            right_max = 0

            for j in range(i + 1, n):
                right_max = max(right_max, height[j])

            water = min(left_max, right_max) - height[i]
            if water > 0:
                ans += water

        return ans
