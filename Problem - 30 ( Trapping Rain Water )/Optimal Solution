//Video Solution: https://www.youtube.com/watch?v=AVwIfxuVWVk

// Optimal Solution: T.C.: O(n) S.C.: O(1)

//C++

class Solution {
public:
    int trap(vector<int>& height) {
       
        int n = height.size();
        int left_max = 0;
        int right_max = 0;

        int l = 0;
        int r = n - 1;

        int ans = 0;
        
        while (l < r) {

            if (height[l] <= height[r]) {
                if (height[l] >= left_max) {
                    left_max = height[l];
                } else {
                    ans += left_max - height[l];
                }
                l++;
            } else {
                if (height[r] >= right_max) {
                    right_max = height[r];
                } else {
                    ans += right_max - height[r];
                }
                r--;
            }
        }
        return ans;
    }
};

//Java

class Solution {
    public int trap(int[] height) {
        
        int n = height.length;
        int left_max = 0;
        int right_max = 0;

        int l = 0;
        int r = n-1;

        int ans = 0;
        
        while(l<r){

            if(height[l]<=height[r]){
                if(height[l]>=left_max){
                    left_max = height[l];
                }
                else{
                    ans+=left_max-height[l];
                }
                l++;
            }

            else{
                if(height[r]>=right_max){
                    right_max = height[r];
                }
                else{
                    ans+=right_max-height[r];
                }
                r--;
            }
        }
        return ans;
    }
}

//Python3

class Solution:
    def trap(self, height: List[int]) -> int:
        # Optimal Solution: T.C.: O(N) S.C.: O(1)
        n = len(height)
        left_max = 0
        right_max = 0

        l = 0
        r = n - 1

        ans = 0
        
        while l < r:

            if height[l] <= height[r]:
                if height[l] >= left_max:
                    left_max = height[l]
                else:
                    ans += left_max - height[l]
                l += 1
            else:
                if height[r] >= right_max:
                    right_max = height[r]
                else:
                    ans += right_max - height[r]
                r -= 1
        
        return ans
