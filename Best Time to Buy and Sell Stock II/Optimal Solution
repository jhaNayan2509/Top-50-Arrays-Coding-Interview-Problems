//C++

class Solution {
public:
    int maxProfit(vector<int>& prices) {
       //Optimal Solution T.C.: O(N), S.C.: O(1)
        
        int maxprofit = 0;

        int n = prices.size();

        for(int i = 1; i<n; i++){
            if(prices[i]>prices[i-1]){
                maxprofit+=prices[i]-prices[i-1];
            }
        }

        return maxprofit;
    }
};

//Java

class Solution {
    public int maxProfit(int[] prices) {
        //Optimal Solution T.C.: O(N), S.C.: O(1)
        
        int maxprofit = 0;

        int n = prices.length;

        for(int i = 1; i<n; i++){
            if(prices[i]>prices[i-1]){
                maxprofit+=prices[i]-prices[i-1];
            }
        }

        return maxprofit;
    }
}

//Python3

class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        # Optimal Solution T.C.: O(N), S.C.: O(1)
        
        maxprofit = 0
        n = len(prices)

        for i in range(1, n):
            if prices[i] > prices[i-1]:
                maxprofit += prices[i] - prices[i-1]

        return maxprofit
        
