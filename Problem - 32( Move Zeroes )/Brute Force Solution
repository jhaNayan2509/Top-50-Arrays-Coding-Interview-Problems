//Video Solution: https://www.youtube.com/watch?v=gdxRM1_OxJo

//Brute-force Solution: T.C.: O(N) S.C.: O(N)

//C++

class Solution {
public:
    void moveZeroes(vector<int>& nums) {
        int n = nums.size();
        vector<int> arr(n, 0); // Create a vector with the same size and initialize with 0
        int j = 0;

        for (int i = 0; i < n; i++) {
            if (nums[i] != 0) {
                arr[j] = nums[i];
                j++;
            }
        }

        // Copy the result back to the original vector
        for (int i = 0; i < n; i++) {
            nums[i] = arr[i];
        }
    }
};

//Java

class Solution {
    public void moveZeroes(int[] nums) {
        int n = nums.length;
        int[] arr = new int[n];
        int j = 0;

        for(int i = 0; i<n; i++){
            if(nums[i]!=0){
                arr[j] = nums[i];
                j++;
            }
        }

        for(int i = 0; i<n; i++){
            nums[i] = arr[i];
        }
    }
}

//Python3

class Solution:
    def moveZeroes(self, nums: List[int]) -> None:
        """
        Do not return anything, modify nums in-place instead.
        """
        n = len(nums)
        arr = [0] * n  # Create a list with the same size and initialize with 0
        j = 0

        for i in range(n):
            if nums[i] != 0:
                arr[j] = nums[i]
                j += 1

        # Copy the result back to the original list
        for i in range(n):
            nums[i] = arr[i]
