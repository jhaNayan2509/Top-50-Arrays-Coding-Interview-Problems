//C++

class Solution {
public:
    int maxProfit(vector<int>& prices) {
       //Brute-Force T.C.: O(N^2) S.C.: O(1)

        int maxprofit = 0;

        int n = prices.size();

        for(int i = 0; i<n-1; i++){
            int currprofit = 0;
            
            if(prices[i]>=prices[i+1]) continue; //ignoring edge cases

            for(int j = i+1; j<n; j++){
                if(prices[j]>prices[i]){
                    currprofit = prices[j]-prices[i];
                    break;
                }
            }

            maxprofit+=currprofit;
        }

        return maxprofit;
    }
};

//Java

class Solution {
    public int maxProfit(int[] prices) {
        //Brute-Force T.C.: O(N^2) S.C.: O(1)

        int maxprofit = 0;

        int n = prices.length;

        for(int i = 0; i<n-1; i++){
            int currprofit = 0;
            
            if(prices[i]>=prices[i+1]) continue; //ignoring edge cases

            for(int j = i+1; j<n; j++){
                if(prices[j]>prices[i]){
                    currprofit = prices[j]-prices[i];
                    break;
                }
            }

            maxprofit+=currprofit;
        }

        return maxprofit;
    }
}

//Python3

class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        # Brute-Force T.C.: O(N^2) S.C.: O(1)

        maxprofit = 0

        n = len(prices)

        for i in range(n - 1):
            currprofit = 0

            if prices[i] >= prices[i + 1]:
                continue  # ignoring edge cases

            for j in range(i + 1, n):
                if prices[j] > prices[i]:
                    currprofit = prices[j] - prices[i]
                    break

            maxprofit += currprofit

        return maxprofit
