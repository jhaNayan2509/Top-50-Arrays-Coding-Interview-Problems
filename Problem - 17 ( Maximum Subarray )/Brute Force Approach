//C++

class Solution {
public:    
    int maxSubArray(vector<int>& nums) {
         int n = nums.size();

        int maxSum = INT_MIN;

        for(int i=0; i<n; i++){
            int sum = 0;
            for(int j=i; j<n; j++){
                sum+=nums[j];

                if(sum>maxSum){
                    maxSum=sum;
                }
            }
        }
        return maxSum;
    }
};

//Java

class Solution {
    public int maxSubArray(int[] nums) {
        int n = nums.length;

        int maxSum = Integer.MIN_VALUE;

        for(int i=0; i<n; i++){
            int sum = 0;
            for(int j=i; j<n; j++){
                sum+=nums[j];

                if(sum>maxSum){
                    maxSum=sum;
                }
            }
        }
        return maxSum;
    }
}

//Python3

class Solution:
    def maxSubArray(self, nums: List[int]) -> int:
        n = len(nums)

        maxSum = float('-inf')

        for i in range(0,n):
            sum = 0
            for j in range(i,n):
                sum+=nums[j]

                if sum>maxSum:
                    maxSum=sum
                
            
        
        return maxSum
