//C++

class Solution {
public:    
    int maxSubArray(vector<int>& nums) {
        int n = nums.size();

        int maxSum = nums[0];
        int currSum = nums[0];

        for(int i = 1; i<n; i++){
            if(currSum>0){
                currSum= currSum+nums[i];
            }
            else
                currSum = nums[i];
            
            maxSum = max(maxSum,currSum);
        }
        return maxSum;
    }
};

//Java

class Solution {
    public int maxSubArray(int[] nums) {
        int n = nums.length;

        int maxSum = nums[0];
        int currSum = nums[0];

        for(int i = 1; i<n; i++){
            if(currSum>0){
                currSum= currSum+nums[i];
            }
            else
                currSum = nums[i];
            
            maxSum = Math.max(maxSum,currSum);
        }
        return maxSum;
    }
}

//Python3

class Solution:
    def maxSubArray(self, nums: List[int]) -> int:
        n = len(nums)

        maxSum = nums[0]
        currSum = nums[0]

        for i in range(1,n):
           if currSum > 0 :
               currSum+=nums[i]
            
           else:
               currSum = nums[i]
        
           maxSum = max(maxSum, currSum) 
            
        
        return maxSum
