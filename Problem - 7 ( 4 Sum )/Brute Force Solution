//C++
class Solution {
public:
    vector<vector<int>> fourSum(vector<int>& nums, int target) {
        int n = nums.size();

        vector<vector<int>> ans;
        sort(nums.begin(), nums.end());

        set<vector<int>> set;

        for(int i = 0; i < n; i++){
            for(int j = i + 1; j < n; j++){
                for(int k = j + 1; k < n; k++){
                    for(int l = k + 1; l < n; l++){
                        long sum = (long) nums[i] + nums[j] + nums[k] + nums[l];

                        if(sum == target){
                            vector<int> vec = {nums[i], nums[j], nums[k], nums[l]};
                            set.insert(vec);
                        }
                    }
                }
            }
        }

        ans.insert(ans.end(), set.begin(), set.end());
        return ans;
    }
};

//Java
class Solution {
    public List<List<Integer>> fourSum(int[] nums, int target) {
        int n = nums.length;

        List<List<Integer>> ans = new ArrayList<>();
        Arrays.sort(nums);

        Set<List<Integer>> set = new HashSet<>();

        for(int i=0; i<n; i++){
            for(int j=i+1; j<n; j++){
                for(int k = j+1; k<n; k++){
                    for(int l = k+1; l<n; l++){
                        long sum = (long) nums[i]+nums[j]+nums[k]+nums[l];

                        if(sum == target){
                            List<Integer> al = new ArrayList<>();
                            al.add(nums[i]);
                            al.add(nums[j]);
                            al.add(nums[k]);
                            al.add(nums[l]);

                            set.add(al);
                        }
                    }
                }
            }
        }
        
        ans.addAll(set);
        return ans;
    }
}

//Python3
class Solution:
    def fourSum(self, nums: List[int], target: int) -> List[List[int]]:
        n = len(nums)

        ans = []
        nums.sort()

        my_set = set()

        for i in range(n):
            for j in range(i + 1, n):
                for k in range(j + 1, n):
                    for l in range(k + 1, n):
                        my_sum = nums[i] + nums[j] + nums[k] + nums[l]

                        if my_sum == target:
                            my_list = [nums[i], nums[j], nums[k], nums[l]]
                            my_set.add(tuple(my_list))

        ans.extend(list(my_set))
        return ans
