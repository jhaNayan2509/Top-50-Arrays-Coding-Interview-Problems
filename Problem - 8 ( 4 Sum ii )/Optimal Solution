//C++
class Solution {
public:
    int fourSumCount(vector<int>& nums1, vector<int>& nums2, vector<int>& nums3, vector<int>& nums4) {
        int n = nums1.size();
        int count = 0;

        unordered_map<int, int> umap;

        for (int c : nums3) {
            for (int d : nums4) {
                umap[c + d]++;
            }
        }

        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                int sum = nums1[i] + nums2[j];

                if (umap.find(-sum) != umap.end()) {
                    count += umap[-sum];
                }
            }
        }
        return count;
    }
};

//Java
class Solution {
    public int fourSumCount(int[] nums1, int[] nums2, int[] nums3, int[] nums4) {
        int n = nums1.length;
        int count = 0;

        Map<Integer,Integer> map = new HashMap<>();

        for(int c : nums3){
            for(int d : nums4)
            map.put(c+d, map.getOrDefault(c+d,0)+1);
        }

        for(int i=0; i<n; i++){
            for(int j=0; j<n; j++){
                      
                        int sum = nums1[i]+nums2[j];
                        if(map.containsKey(-sum)) count+=map.get(-sum);
            }
        }
        return count; 
    }
}

//Python3
class Solution:
    def fourSumCount(self, nums1: List[int], nums2: List[int], nums3: List[int], nums4: List[int]) -> int:
        n = len(nums1)
        count = 0

        umap = {}

        for c in nums3:
            for d in nums4:
                umap[c + d] = umap.get(c + d, 0) + 1

        for i in range(n):
            for j in range(n):
                sum_val = nums1[i] + nums2[j]

                if -sum_val in umap:
                    count += umap[-sum_val]

        return count
