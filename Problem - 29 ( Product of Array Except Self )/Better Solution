//Video Solution: https://www.youtube.com/watch?v=4K2UD0Yr7ks

// Better Solution: T.C.: O(n) S.C.: O(n)

//C++

class Solution {
public:
    vector<int> productExceptSelf(vector<int>& nums) {
        int n = nums.size();
        vector<int> ans(n);
        vector<int> pref(n);
        vector<int> suff(n);

        pref[0] = nums[0];
        for (int i = 1; i < n; i++) {
            pref[i] = nums[i] * pref[i - 1];
        }

        suff[n - 1] = nums[n - 1];
        for (int i = n - 2; i >= 0; i--) {
            suff[i] = nums[i] * suff[i + 1];
        }

        ans[0] = suff[1];
        ans[n - 1] = pref[n - 2];

        for (int i = 1; i <= n - 2; i++) {
            ans[i] = pref[i - 1] * suff[i + 1];
        }

        return ans;
    }
};

//Java

class Solution {
    public int[] productExceptSelf(int[] nums) {
        
        int n =  nums.length;

        int[] ans = new int[n];
        int[] pref = new int[n];
        int[] suff = new int[n];

        pref[0] = nums[0];

        for(int i = 1; i<n; i++){
            pref[i] = nums[i]*pref[i-1];
        }

        suff[n-1] = nums[n-1];

        for(int i = n-2; i>=0; i--){
            suff[i] = nums[i]*suff[i+1];
        }
        
        ans[0] = suff[1];
        ans[n-1] = pref[n-2];

        for(int i = 1; i<=n-2; i++){
            ans[i]= pref[i-1]*suff[i+1];
        }

        return ans;

    }
}

//Python3

class Solution:
    def productExceptSelf(self, nums: List[int]) -> List[int]:
        n = len(nums)
        ans = [0] * n
        pref = [0] * n
        suff = [0] * n

        pref[0] = nums[0]
        for i in range(1, n):
            pref[i] = nums[i] * pref[i - 1]

        suff[n - 1] = nums[n - 1]
        for i in range(n - 2, -1, -1):
            suff[i] = nums[i] * suff[i + 1]

        ans[0] = suff[1]
        ans[n - 1] = pref[n - 2]

        for i in range(1, n - 1):
            ans[i] = pref[i - 1] * suff[i + 1]

        return ans
