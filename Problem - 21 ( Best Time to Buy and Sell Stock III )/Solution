//C++
class Solution {
public:
    int maxProfit(vector<int>& prices) {
        //T.C.: O(N) S.C.: O(1)

        if(prices.size() == 0)
            return 0;

        int buyPrice1 = INT_MAX;
        int profit1   = INT_MIN;
        int buyPrice2 = INT_MAX;
        int profit2   = INT_MIN;

        for(int i = 0; i < prices.size(); i++){
            //first Transaction
            buyPrice1   = min(buyPrice1, prices[i]);
            profit1     = max(profit1, prices[i] - buyPrice1);

            //Second Transaction
            buyPrice2   = min(buyPrice2, prices[i] - profit1); 
            profit2     = max(profit2, prices[i] - buyPrice2);
        }

        return profit2;
    }
};


//Java
class Solution {
    
    public int maxProfit(int[] prices) {
        //T.C.: O(N) S.C.: O(1)

        if(prices.length == 0)
            return 0;

        int buyPrice1 = Integer.MAX_VALUE;
        int profit1 = Integer.MIN_VALUE;
        int buyPrice2 = Integer.MAX_VALUE;
        int profit2 = Integer.MIN_VALUE;

        for(int i = 0; i < prices.length; i++){
            //first Transaction
            buyPrice1   = Math.min(buyPrice1, prices[i]);
            profit1     = Math.max(profit1, prices[i] - buyPrice1);

            //Second Transaction
            buyPrice2   = Math.min(buyPrice2, prices[i] - profit1); 
            profit2     = Math.max(profit2, prices[i] - buyPrice2);
        }

        return profit2;
    }
}

//Python3

class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        #T.C.: O(N) S.C.: O(1)

        if len(prices) == 0:
            return 0

        buyPrice1 = float(inf)
        profit1   = float(-inf)
        buyPrice2 = float(inf)
        profit2  = float(-inf)

        
        for i in range(0,len(prices)):
            #first Transaction
            buyPrice1   = min(buyPrice1, prices[i])
            profit1     = max(profit1, prices[i] - buyPrice1)

            #Second Transaction
            buyPrice2   = min(buyPrice2, prices[i] - profit1) 
            profit2     = max(profit2, prices[i] - buyPrice2)
        

        return profit2
