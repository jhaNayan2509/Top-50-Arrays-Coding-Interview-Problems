//Video Solution: 

//Brute-force Solution: T.C.: O(N^2) S.C.: O(1)

//C++

class Solution {
public:
    int findMaxLength(vector<int>& nums) {
		int ans = 0;
        for (int i = 0; i < nums.size(); i++) {
            int zeroes = 0, ones = 0;
            for (int j = i; j < nums.size(); j++) {
                if (nums[j] == 0) {
                    zeroes++;
                } else {
                    ones++;
                }
                if (zeroes == ones) {
                    ans = max(ans, j - i + 1);
                }
            }
        }
        return ans;
    }
};

//Java

class Solution {
    public int findMaxLength(int[] nums) {
        int ans = 0;
        for (int i = 0; i < nums.length; i++) {
            int zeroes = 0, ones = 0;
            for (int j = i; j < nums.length; j++) {
                if (nums[j] == 0) {
                    zeroes++;
                } else {
                    ones++;
                }
                if (zeroes == ones) {
                    ans = Math.max(ans, j - i + 1);
                }
            }
        }
        return ans;
    }
}


//Python3

class Solution:
    def findMaxLength(self, nums: List[int]) -> int:
        ans = 0
        for i in range(len(nums)):
            zeroes = 0
            ones = 0
            for j in range(i, len(nums)):
                if nums[j] == 0:
                    zeroes += 1
                else:
                    ones += 1
                if zeroes == ones:
                    ans = max(ans, j - i + 1)
        return ans
