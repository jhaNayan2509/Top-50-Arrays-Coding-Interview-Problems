Video Solution (Hindi) : www.youtube.com/watch?v=UoA7aSSSFw8

//C++

class Solution {
public:
    vector<vector<int>> generate(int numRows) {
        //T.C.: O(n^2) S.C.: O(n^2)
        vector<vector<int>> answer;
        
        if (numRows == 0) return answer;

        //Creating and filling first row
        answer.push_back(vector<int>());
        answer[0].push_back(1);

        for (int i = 1; i < numRows; i++) {
            vector<int> prev_row = answer[i - 1];
            vector<int> new_row;
           
            new_row.push_back(1); //segment-1

            //segment-2
            for (int j = 1; j < prev_row.size(); j++) {
                new_row.push_back(prev_row[j - 1] + prev_row[j]);
            }

            new_row.push_back(1); //segment-3

            answer.push_back(new_row);
        }

        return answer;
    }
};

//Java

class Solution {
    public List<List<Integer>> generate(int numRows) {
        //T.C.: O(n^2) S.C.: O(n^2)
        List<List<Integer>> answer = new ArrayList<>();
        
        if (numRows == 0) return answer;

        //Creating and filling first row
        answer.add(new ArrayList<>());
        answer.get(0).add(1);

        for (int i = 1; i < numRows; i++) {
            
            List<Integer> prev_row = answer.get(i - 1);

            List<Integer> new_row = new ArrayList<>();
           
            new_row.add(1); //segment-1

            
            //segment-2
            for (int j = 1; j < prev_row.size(); j++) {
                new_row.add(prev_row.get(j - 1) + prev_row.get(j));
            }


            new_row.add(1); //segment-3

           answer.add(new_row);
        }

        return answer;
    }
}

//Python3

class Solution:
    def generate(self, numRows: int) -> List[List[int]]:
        #T.C.: O(n^2), S.C.: O(n^2)
        answer = []
        
        if numRows == 0:
            return answer
        
        # Creating and filling first row
        answer.append([])
        answer[0].append(1)

        for i in range(1, numRows):
            prev_row = answer[i - 1]
            new_row = []
           
            new_row.append(1)  # segment-1

            # segment-2
            for j in range(1, len(prev_row)):
                new_row.append(prev_row[j - 1] + prev_row[j])

            new_row.append(1)  # segment-3

            answer.append(new_row)

        return answer
