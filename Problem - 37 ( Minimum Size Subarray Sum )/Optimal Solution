//Video Solution: https://youtu.be/aaTCBlSZIjg

//Optimal Solution: T.C.: O(N) S.C.: O(1)

//C++

class Solution {
public:
    int minSubArrayLen(int target, vector<int>& nums) {
        int n = nums.size();
        int ans = INT_MAX;
        int w_sum = 0;
        int start = 0;

        for (int i = 0; i < n; i++) {
            w_sum += nums[i];

            while (w_sum >= target) {
                ans = min(ans, i - start + 1);
                w_sum -= nums[start];
                start++;
            }
        }

        return ans == INT_MAX ? 0 : ans;
    }
};

//Java

class Solution {
    public int minSubArrayLen(int target, int[] nums) {
        int n = nums.length;
		int ans = Integer.MAX_VALUE;
        int w_sum = 0;
        int start = 0;
		
		for(int i = 0; i<n; i++){
		    w_sum+=nums[i];
		    
		    while(w_sum>=target){
		        ans= Math.min(ans, i-start+1);
		        w_sum-=nums[start];
		        start++;
		    }
		    
		}
		
		return ans == Integer.MAX_VALUE?0:ans;
    }
}

//Python3

class Solution:
    def minSubArrayLen(self, target: int, nums: List[int]) -> int:
        n = len(nums)
        ans = float('inf')
        w_sum = 0
        start = 0

        for i in range(n):
            w_sum += nums[i]

            while w_sum >= target:
                ans = min(ans, i - start + 1)
                w_sum -= nums[start]
                start += 1

        return 0 if ans == float('inf') else ans
